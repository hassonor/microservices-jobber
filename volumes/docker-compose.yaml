services:
  redis:
    container_name: redis_container
    image: redis:alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --loglevel warning
    volumes:
      - ./docker-volumes/cache:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elastic

  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - ./docker-volumes/data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.runCommand(\"ping\").ok'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elastic

  mysql:
    container_name: mysql_container
    image: mysql:latest
    restart: always
    environment:
      MYSQL_USER: jobber
      MYSQL_DATABASE: jobber_auth
      MYSQL_ROOT_PASSWORD: local
      MYSQL_PASSWORD: local
    ports:
      - '3306:3306'
    volumes:
      - ./docker-volumes/mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elastic

  postgres:
    container_name: postgres_container
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: jobber
      POSTGRES_PASSWORD: api
      POSTGRES_DB: jobber_reviews
    ports:
      - '5432:5432'
    volumes:
      - ./docker-volumes/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elastic

  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:3.13.7-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=jobber
      - RABBITMQ_DEFAULT_PASS=jobberpass
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elastic

  elasticsearch-setup:
    container_name: elasticsearch_setup
    image: curlimages/curl:latest
    volumes:
      - ./wait-for-elasticsearch.sh:/wait-for-elasticsearch.sh
    entrypoint: [ "/bin/sh", "/wait-for-elasticsearch.sh" ]
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - elastic

  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      network.host: 0.0.0.0
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
      xpack.security.enabled: 'true'
      xpack.security.authc.api_key.enabled: 'true'
      xpack.monitoring.collection.enabled: 'true'
      xpack.security.enrollment.enabled: 'true'
      xpack.security.authc.token.enabled: 'true'
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-admin1234}
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - ./docker-volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic
    healthcheck:
      test: [ "CMD", "curl", "-f", "-u", "elastic:${ELASTIC_PASSWORD:-admin1234}", "http://localhost:9200/_cluster/health" ]
      interval: 10s
      timeout: 10s
      retries: 5

  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.15.0
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_SYSTEM_PASSWORD:-kibana}
      - ELASTICSEARCH_SERVICEACCOUNT_TOKEN=AAEAAWVsYXN0aWMva2liYW5hL2pvYmJlci1raWJhbmE6VUpidWF0QUhRQ0t4eTdOOWpobjlBQQ
      - XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
    ports:
      - '5601:5601'
    depends_on:
      elasticsearch-setup:
        condition: service_completed_successfully
    networks:
      - elastic
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml:ro

  apmServer:
    image: docker.elastic.co/apm/apm-server:8.15.0
    container_name: apm_server_container
    ports:
      - 8200:8200
    volumes:
      - ./apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    networks:
      - elastic
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana_container:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana_container:5601
        -E apm-server.kibana.protocol=http
        -E strict.perms=false
        -E apm-server.auth.anonymous.enabled=true
        -E setup.template.type=composable
        -E setup.template.enabled=true
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_started

  metricbeat:
    container_name: metricbeat_container
    image: docker.elastic.co/beats/metricbeat:8.15.0
    user: root
    ports:
      - '5066:5066'
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_started
    networks:
      - elastic
    volumes:
      - ./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    command: [ "--strict.perms=false","-system.hostfs=/hostfs" ]

  heartbeat:
    container_name: heartbeat_container
    image: docker.elastic.co/beats/heartbeat:8.15.0
    user: root
    hostname: heartbeat
    cap_add:
      - NET_RAW
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_started
    networks:
      - elastic
    command: [ "--strict.perms=false" ]
    volumes:
      - ./heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro

  notifications:
    container_name: notification_container
    build:
      context: ../2-notification-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - '4001:4001'
    env_file: ../2-notification-service/.env
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000
      - RABBITMQ_ENDPOINT=amqp://jobber:jobberpass@rabbitmq_container:5672
      - SENDER_EMAIL=alycia.beahan9@ethereal.email
      - SENDER_EMAIL_PASSWORD=fbUJMJ18cHy7NWeER9
      - ELASTIC_SEARCH_URL=http://elastic:${ELASTIC_PASSWORD}@elasticsearch_container:9200
      - ELASTIC_APM_SERVER_URL=http://localhost:8200
      - ELASTIC_APM_SECRET_TOKEN=
    depends_on:
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch-setup:
        condition: service_completed_successfully
    networks:
      - elastic

  auth:
    container_name: auth_container
    build:
      context: ../3-auth-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - '4002:4002'
    env_file:
      - ../3-auth-service/.env
      - .env.cloudinary
    environment:
      - ENABLE_APM=0
      - JWT_TOKEN=7321D458E5CED2A57309DBAAFB9F11E7
      - GATEWAY_JWT_TOKEN=05653C4CAFD13DA163B9215FED89033E
      - NODE_ENV=development
      - API_GATEWAY_URL=http://gateway_container:4000
      - CLIENT_URL=http://localhost:3000
      - RABBITMQ_ENDPOINT=amqp://jobber:jobberpass@rabbitmq_container:5672
      - MYSQL_DB=mysql://jobber:local@mysql_container:3306/jobber_auth
      - SENDER_EMAIL=alycia.beahan9@ethereal.email
      - SENDER_EMAIL_PASSWORD=fbUJMJ18cHy7NWeER9
      - ELASTIC_SEARCH_URL=http://elastic:${ELASTIC_PASSWORD}@elasticsearch_container:9200
      - ELASTIC_APM_SERVER_URL=http://localhost:8200
      - ELASTIC_APM_SECRET_TOKEN=
    depends_on:
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mysql:
        condition: service_healthy
      elasticsearch-setup:
        condition: service_completed_successfully
    networks:
      - elastic

  users:
    container_name: users_container
    build:
      context: ../4-users-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4003:4003
    env_file:
      - ../4-users-service/.env
      - .env.cloudinary
    environment:
      - ENABLE_APM=0
      - DATABASE_URL=mongodb://mongodb_container:27017/jobber-users
      - JWT_TOKEN=7321D458E5CED2A57309DBAAFB9F11E7
      - GATEWAY_JWT_TOKEN=05653C4CAFD13DA163B9215FED89033E
      - NODE_ENV=development
      - API_GATEWAY_URL=http://gateway_container:4000
      - RABBITMQ_ENDPOINT=amqp://jobber:jobberpass@rabbitmq_container:5672
      - REDIS_HOST=redis://redis_container:6379
      - ELASTIC_SEARCH_URL=http://elastic:${ELASTIC_PASSWORD}@elasticsearch_container:9200
      - ELASTIC_APM_SERVER_URL=http://localhost:8200
      - ELASTIC_APM_SECRET_TOKEN=
    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch-setup:
        condition: service_completed_successfully
    networks:
      - elastic

  gig:
    container_name: gig_container
    build:
      context: ../5-gig-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4004:4004
    env_file:
      - ../5-gig-service/.env
      - .env.cloudinary
    environment:
      - ENABLE_APM=0
      - DATABASE_URL=mongodb://mongodb_container:27017/jobber-gig
      - JWT_TOKEN=7321D458E5CED2A57309DBAAFB9F11E7
      - GATEWAY_JWT_TOKEN=05653C4CAFD13DA163B9215FED89033E
      - NODE_ENV=development
      - API_GATEWAY_URL=http://gateway_container:4000
      - RABBITMQ_ENDPOINT=amqp://jobber:jobberpass@rabbitmq_container:5672
      - REDIS_HOST=redis://redis_container:6379
      - ELASTIC_SEARCH_URL=http://elastic:${ELASTIC_PASSWORD}@elasticsearch_container:9200
      - ELASTIC_APM_SERVER_URL=http://localhost:8200
      - ELASTIC_APM_SECRET_TOKEN=
    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch-setup:
        condition: service_completed_successfully
    networks:
      - elastic

  chat:
    container_name: chat_container
    build:
      context: ../6-chat-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4005:4005
    env_file:
      - ../6-chat-service/.env
      - .env.cloudinary
    environment:
      - ENABLE_APM=0
      - DATABASE_URL=mongodb://mongodb_container:27017/jobber-chat
      - JWT_TOKEN=7321D458E5CED2A57309DBAAFB9F11E7
      - GATEWAY_JWT_TOKEN=05653C4CAFD13DA163B9215FED89033E
      - NODE_ENV=development
      - API_GATEWAY_URL=http://gateway_container:4000
      - RABBITMQ_ENDPOINT=amqp://jobber:jobberpass@rabbitmq_container:5672
      - REDIS_HOST=redis://redis_container:6379
      - ELASTIC_SEARCH_URL=http://elastic:${ELASTIC_PASSWORD}@elasticsearch_container:9200
      - ELASTIC_APM_SERVER_URL=http://localhost:8200
      - ELASTIC_APM_SECRET_TOKEN=
    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch-setup:
        condition: service_completed_successfully
    networks:
      - elastic

  order:
    container_name: order_container
    build:
      context: ../7-order-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4006:4006
    env_file:
      - ../7-order-service/.env
      - .env.cloudinary
      - .env.strip
    environment:
      - ENABLE_APM=0
      - DATABASE_URL=mongodb://mongodb_container:27017/jobber-order
      - JWT_TOKEN=7321D458E5CED2A57309DBAAFB9F11E7
      - GATEWAY_JWT_TOKEN=05653C4CAFD13DA163B9215FED89033E
      - NODE_ENV=development
      - API_GATEWAY_URL=http://gateway_container:4000
      - RABBITMQ_ENDPOINT=amqp://jobber:jobberpass@rabbitmq_container:5672
      - REDIS_HOST=redis://redis_container:6379
      - ELASTIC_SEARCH_URL=http://elastic:${ELASTIC_PASSWORD}@elasticsearch_container:9200
      - ELASTIC_APM_SERVER_URL=http://localhost:8200
      - ELASTIC_APM_SECRET_TOKEN=
    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch-setup:
        condition: service_completed_successfully
    networks:
      - elastic

  review:
    container_name: review_container
    build:
      context: ../8-review-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4007:4007
    env_file:
      - ../8-review-service/.env
    environment:
      - ENABLE_APM=0
      - DATABASE_HOST=postgres_container
      - DATABASE_USER=jobber
      - DATABASE_PASSWORD=api
      - DATABASE_NAME=jobber_reviews
      - JWT_TOKEN=7321D458E5CED2A57309DBAAFB9F11E7
      - GATEWAY_JWT_TOKEN=05653C4CAFD13DA163B9215FED89033E
      - NODE_ENV=development
      - API_GATEWAY_URL=http://gateway_container:4000
      - RABBITMQ_ENDPOINT=amqp://jobber:jobberpass@rabbitmq_container:5672
      - REDIS_HOST=redis://redis_container:6379
      - ELASTIC_SEARCH_URL=http://elastic:${ELASTIC_PASSWORD}@elasticsearch_container:9200
      - ELASTIC_APM_SERVER_URL=http://localhost:8200
      - ELASTIC_APM_SECRET_TOKEN=
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch-setup:
        condition: service_completed_successfully
    networks:
      - elastic

  gateway:
    container_name: gateway_container
    build:
      context: ../1-gateway-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - '4000:4000'
    env_file: ../1-gateway-service/.env
    environment:
      ENABLE_APM: 0
      GATEWAY_JWT_TOKEN: 05653C4CAFD13DA163B9215FED89033E
      JWT_TOKEN: 7321D458E5CED2A57309DBAAFB9F11E7
      NODE_ENV: development
      SECRET_KEY_ONE: DBA97943BA32BEF0FBA2B87CC3489439
      SECRET_KEY_TWO: E11376AE6FE5E1C5F21EDEE913FC9ABE
      CLIENT_URL: http://localhost:3000
      AUTH_BASE_URL: http://auth_container:4002
      USERS_BASE_URL: http://users_container:4003
      GIG_BASE_URL: http://gig_container:4004
      MESSAGE_BASE_URL: http://chat_container:4005
      ORDER_BASE_URL: http://order_container:4006
      REVIEW_BASE_URL: http://review_container:4007
      REDIS_HOST: redis://redis_container:6379
      ELASTIC_SEARCH_URL: http://elastic:${ELASTIC_PASSWORD}@elasticsearch_container:9200
      ELASTIC_APM_SERVER_URL: http://apm_server_container:8200
      ELASTIC_APM_SECRET_TOKEN: ""
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch-setup:
        condition: service_completed_successfully
    networks:
      - elastic

  jenkins:
    container_name: jenkins_container
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    ports:
      - 8080:8080
      - 50000:50000
    volumes:
      - ./docker-volumes/jenkins_compose/jenkins_configuration:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock

  jenkins-agent:
    container_name: jenkins_agent_container
    image: jenkins/ssh-agent:jdk17
    privileged: true
    user: root
    expose:
      - 22
    env_file:
      - .env.jenkins

networks:
  elastic:
      name: elastic